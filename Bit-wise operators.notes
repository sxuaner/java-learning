# what does << do?
https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html

# use Karakau to disassemble the code
1. downlaod the app on github
2. python disassemble.py <class-file>           // this outputs a .j file
3. cat <filename>.j                  
// j files are descriptions of Java classes,written in a simple assembler-like syntax using the Java Virtual Machine 
// instruction set and Jasmin assembler converts them into binary Java class files, suitable for loading by a Java 
// runtime system.

or: 
$javap -c BitWiseOperators.class        // To disassemble the class file


# The Bitwise Operators
Java defines several bitwise operators, which can be applied to the integer types, long, int, short, char, and byte.

Bitwise operator works on bits and performs bit-by-bit operation. Assume if a = 60 and b = 13; now in binary format they will be as follows

a = 0011 1100
b = 0000 1101
-----------------
a&b = 0000 1100

a|b = 0011 1101

a^b = 0011 0001

~a  = 1100 0011

The following table lists the bitwise operators 
Assume integer variable A holds 60 and variable B holds 13 then âˆ’

Show Examples

Operator	Description	Example
& (bitwise and)	Binary AND Operator copies a bit to the result if it exists in both operands.	(A & B) will give 12 which is 0000 1100

| (bitwise or)	Binary OR Operator copies a bit if it exists in either operand.	(A | B) will give 61 which is 0011 1101

^ (bitwise XOR)	Binary XOR Operator copies the bit if it is set in one operand but not both.	(A ^ B) will give 49 which is 0011 0001

~ (bitwise compliment)	Binary Ones Complement Operator is unary and has the effect of 'flipping' bits.	(~A ) will give -61 which is 1100 0011 

in 2's complement form due to a signed binary number.

<< (left shift)	Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.	A << 2 
will give 240 which is 1111 0000

>> (right shift)	Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.	
A >> 2 will give 15 which is 1111

>>> (zero fill right shift)	Shift right zero fill operator. The left operands value is moved right by the number of bits specified by the right 
operand and shifted values are filled up with zeros.	
! e.g A >>>2 will give 15 which is 0000 1111

# Masking
Using a mask, multiple bits in a byte, nibble, word etc. can be set either on, off or inverted from on to off (or vice versa) in a single bitwise operation

! Masking bits to 1
To turn certain bits on, the bitwise OR operation can be used, following the principle that 

        !Y OR 1 = 1 and Y OR 0 = Y. 

Therefore, to make sure a bit is on, OR can be used with a 1. To leave a bit unchanged, OR is used with a 0.

! Masking bits to 0
Bits are "masked off" (or masked to 0) than "masked on" (or masked to 1). 

        ! Y AND 1 = Y  and  Y AND 0 = 0

When a bit is ANDed with a 0, the result is always 0, i.e. Y AND 0 = 0. 
To leave the other bits as they were originally, they can be ANDed with 1 as Y AND 1 = Y

! Querying the status of a bit
It is possible to use bitmasks to easily check the state of individual bits regardless of the other bits.

    10011101   10010101
AND 00001000   00001000
  = 00001000   00000000

! Toggle the  bits:
Sometimes it does not really matter what the value is, but it must be made the opposite of what it currently is.
XOR (exclusive or): XOR returns 1 if and only if an odd number of bits are 1.
! Also note that XOR masking is bit-safe, meaning that it will not affect unmasked bits because Y XOR 0 = Y, just like an OR.

        ! 0 XOR 1 = 1  ,  1 XOR 1 = 0   , 0 XOR 0  = 0 [ zero( an even #) occurrance of 1  and return 1]   1 XOR 0 = 1

! Even numbers are those numbers that can be divided into two equal groups or pairs and are exactly divisible by 2. 