# @SuppressWarnings



# @Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE})
JLS 9.7.4.


# Retentionw


# @RestController - Spring
This code uses Spring @RestController annotation, which marks the class as a controller where every method returns a domain object instead of a view. 
It is shorthand for including both @Controller and @ResponseBody.

# @SpringBootApplication is a convenience annotation that adds all of the following:
@Configuration: Tags the class as a source of bean definitions for the application context.

@EnableAutoConfiguration: Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings. For 
example, if spring-webmvc is on the classpath, this annotation flags the application as a web application and activates key behaviors, such as 
setting up a DispatcherServlet.

@ComponentScan: Tells Spring to look for other components, configurations, and services in the com/example package, letting it find the controllers.

The main() method uses Spring Boot’s SpringApplication.run() method to launch an application. Did you notice that there was not a single line of XML? 
There is no web.xml file, either. This web application is 100% pure Java and you did not have to deal with configuring any plumbing or infrastructure.

# @Scheduled(fixedRate = 5000) Spring

# @JsonIgnoreProperties(ignoreUnknown = true)
@JsonIgnoreProperties is from the Jackson JSON processing library to indicate that any properties not bound in this #type# should be ignored.
! what does  type here refer to?

#Bean
In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an 
object that is instantiated, assembled, and otherwise managed by a Spring IoC container. Otherwise, a bean is simply one of many objects in your application.








############################### Spring Annotations ###############################
# @RestController 
!Class-level
The first annotation on our MyApplication class is @RestController. This is known as a stereotype annotation. It provides hints for people reading
the code and for Spring that the class plays a specific role. In this case, our class is a web @Controller, so Spring considers it when handling 
incoming web requests.

# @RequestMapping
! Method-level
The @RequestMapping annotation provides “routing” information. It tells Spring that any HTTP request with the / path should be mapped to the home 
method. The @RestController annotation tells Spring to render the resulting string directly back to the caller.

!The @RestController and @RequestMapping annotations are Spring MVC annotations.

#@EnableAutoConfiguration
!class-level! 
The second class-level annotation is @EnableAutoConfiguration. This annotation tells Spring Boot to “guess” how you want to configure Spring, based 
on the jar dependencies that you have added. Since spring-boot-starter-web added Tomcat and Spring MVC, the auto-configuration assumes that you are 
developing a web application and sets up Spring accordingly.


#@Import
You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes. Alternatively, you can use @ComponentScan to automatically pick up all Spring components, including @Configuration classes.

# @ComponentScan