# @SuppressWarnings



# @Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE})

# Retentionw



# @RestController - Spring
This code uses Spring @RestController annotation, which marks the class as a controller where every method returns a domain object instead of a view. 
It is shorthand for including both @Controller and @ResponseBody.

# @SpringBootApplication is a convenience annotation that adds all of the following:
@Configuration: Tags the class as a source of bean definitions for the application context.

@EnableAutoConfiguration: Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings. For 
example, if spring-webmvc is on the classpath, this annotation flags the application as a web application and activates key behaviors, such as 
setting up a DispatcherServlet.

@ComponentScan: Tells Spring to look for other components, configurations, and services in the com/example package, letting it find the controllers.

The main() method uses Spring Bootâ€™s SpringApplication.run() method to launch an application. Did you notice that there was not a single line of XML? 
There is no web.xml file, either. This web application is 100% pure Java and you did not have to deal with configuring any plumbing or infrastructure.

# @Scheduled(fixedRate = 5000) Spring

# @JsonIgnoreProperties(ignoreUnknown = true)
@JsonIgnoreProperties is from the Jackson JSON processing library to indicate that any properties not bound in this #type# should be ignored.
! what does  type here refer to?

#Bean
In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an 
object that is instantiated, assembled, and otherwise managed by a Spring IoC container. Otherwise, a bean is simply one of many objects in your application.