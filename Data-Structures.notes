# Definition of Data structure
In computer science, a data structure is a data organization, management, and storage format that
enables efficient access and modification.[1][2][3] More precisely, a data structure is a collection of 
data values, the relationships among them, and the functions or operations that can be applied to the
data i.e., it is an algebraic structure about data.

# Kinds of DS

There are numerous types of data structures, generally built upon simpler primitive data types
An array is a number of elements in a specific order, typically all of the same type (depending on the language, 
individual elements may either all be forced to be the same type, or may be of almost any type). Elements are 
accessed using an integer index to specify which element is required. Typical implementations allocate contiguous 
memory words for the elements of arrays (but this is not always a necessity). Arrays may be fixed-length or resizable.

A linked list (also just called list) is a linear collection of data elements of any type, called nodes, where 
each node has itself a value, and points to the next node in the linked list. The principal advantage of a linked 
list over an array is that values can always be efficiently inserted and removed without relocating the rest of 
the list. Certain other operations, such as random access to a certain element, are however slower on lists than on arrays.

A record (also called tuple or struct) is an aggregate data structure. A record is a value that contains other 
values, typically in fixed number and sequence and typically indexed by names. The elements of records are usually 
called fields or members.

A union is a data structure that specifies which of a number of permitted primitive types may be stored in its 
instances, e.g. float or long integer. Contrast with a record, which could be defined to contain a float and an 
integer; whereas in a union, there is only one value at a time. Enough space is allocated to contain the widest member datatype.
A tagged union (also called variant, variant record, discriminated union, or disjoint union) contains an additional 
field indicating its current type, for enhanced type safety.

An object is a data structure that contains data fields, like a record does, as well as various methods which operate 
on the data contents. An object is an in-memory instance of a class from a taxonomy. In the context of object-oriented 
programming, records are known as plain old data structures to distinguish them from objects.

# What is black-red tree

# What is  B-tree

# What is balanced b-tree?