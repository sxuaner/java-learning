1. Builder
2. Observer.
3. singleton
4. imutable pattern
5. Prototype pattern

# Principles: 
Depend on abstraction instead of implementations. This can also mean the 
[java]
public void returnAUrl(){
    return getUrl();    // getUrl() is an interface which is abstract
}
[end]

# Why is interface needed? How was polymorphism getting so important.

# What is domain-driven design (Evans, 2003)

# What is proxy design pattern?
In computer programming, the proxy pattern is a !software design pattern!. A proxy, in its most general form, is a class functioning as an interface to something else. 
The proxy could interface to anything: a network connection, a large object in memory, a file, or !some other resource that is expensive or impossible to duplicate.! 
!In short, a proxy is a wrapper or agent object that is being called by the client to access the real serving object behind the scenes. 
Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy, extra functionality can be provided, for example caching 
when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked. 
For the client, usage of a proxy object is similar to using the real object, because both implement the same interface.

Proxy is applicable whenever there is a need for a more versatile or sophisticated reference to an object than a simple pointer. 

! surrogate : replacing someone else or used instead of something else: