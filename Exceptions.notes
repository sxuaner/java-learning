# Checked exception?
The ones that do not extend the java.lang.RuntimeException. 

The class Exception and any subclasses that are !not! also subclasses of RuntimeException are checked 
exceptions. Checked exceptions need to be declared in a method or constructor's throws clause if they 
can be thrown by the execution of the method or constructor and propagate outside the method or 
constructor boundary.

#Unchecked exceptions extend the java.lang.RuntimeException
RuntimeException and its subclasses are unchecked exceptions. Unchecked exceptions do not need to be 
declared in a method or constructor's throws clause if they can be thrown by the execution of the method 
or constructor and propagate outside the method or constructor boundary.

# Exception propogation??

# How to deal with exceptions
! Check it thread out: https://stackoverflow.com/questions/2126997/who-is-calling-the-java-thread-interrupt-method-if-im-not
The Thread interrupt mechanism is the preferred way to get a (cooperating) thread to respond a request to stop what 
it is doing. Any thread (including the thread itself I think) could call interrupt() on a Thread.

In practice, the normal use-cases for interrupt() involve some kind of framework or manager telling some worker 
thread to stop what they are doing. If the worker thread is "interrupt aware" it will notice that it has been 
interrupted via an exception, or by periodically checking its interrupted flag. On noticing that it has been 
interrupted, a well-behaved thread would abandon what it is doing and end itself.

Assuming the above use-case, your code is likely to be interrupted if it is run within a Java framework or from some 
worker thread. And when it is interrupted, your code should abandon what it is doing and cause itself to end by the 
most appropriate means. Depending on how your code was called, this might be done by returning or by throwing some 
appropriate exception. But it probably should not call System.exit(). (Your application does not necessarily know why 
it was interrupted, and it certainly does not know if there are other threads that need to be interrupted by the framework.)

On the other hand, if your code is not designed to run under the control of some framework, you could argue that the 
InterruptedException is an unexpected exception; i.e. a bug. In that case, you should treat the exception as you would 
other bugs; e.g. wrap it in an unchecked exception, and catch and log it at the same point you deal with other 
unexpected unchecked exceptions. (Alternatively, your application could simply ignore the interrupt and continue doing 
what it was doing.)

# How to deal with some exceptions if the mechanism is not yet known?
Until you know why InterruptedException is being thrown, I would advise treating it as a hard error; e.g. print a 
stacktrace to the log file and shut down the app. (Obviously, that's not always the right answer ... but the point is 
that this is "a bug", and it needs to be brought to the attention of the developer / maintainer.)


