https://docs.oracle.com/javase/tutorial/essential/concurrency/index.html

!Thread class is in java.lang package

Processes and Threads

In concurrent programming, there are two basic units of execution: processes and threads. In the Java programming language, concurrent programming is 
mostly concerned with threads. However, processes are also important.

A computer system normally has many active processes and threads. This is true even in systems that only have a single execution core, and thus only 
have one thread actually executing at any given moment. Processing time for a single core is shared among processes and threads through an OS feature 
called time slicing.

It's becoming more and more common for computer systems to have multiple processors or processors with multiple execution cores. This greatly enhances 
a system's capacity for concurrent execution of processes and threads — but concurrency is possible even on simple systems, without multiple processors
or execution cores.

# Definition of Processes
A process has a self-contained execution environment. A process generally has a complete, private set of basic run-time resources; in particular, 
each process has its own memory space.

Processes are often seen as synonymous with programs or applications. However, what the user sees as a single application may in fact be a set of 
cooperating processes. To facilitate communication between processes, most operating systems support Inter Process Communication (IPC) resources, 
such as pipes and sockets. IPC is used not just for communication between processes on the same system, but processes on different systems.

!Most implementations of the Java virtual machine run as a single process.! A Java application can create additional processes using a ProcessBuilder 
object. Multiprocess applications are beyond the scope of this lesson.

# Definition of Thread
In computer science, a thread of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler, 
which is typically a part of the operating system.
 
Threads are sometimes called lightweight processes. Both processes and threads provide an execution environment, but creating a new thread requires 
fewer resources than creating a new process.

Threads exist within a process — every process has at least one. Threads share the process's resources, including memory and open files. This makes
for efficient, but potentially problematic, communication.

!Multithreaded execution is an essential feature of the Java platform. Every application has at least one thread — or several!, if you count "system" 
threads that do things like memory management and signal handling. But from the application programmer's point of view, you start with just one 
thread, called the !main thread!. This thread has the ability to create additional threads, as we'll demonstrate in the next section.

#Thread and process 
The implementation of threads and processes differs between operating systems, but in most cases a thread is a component of a process. The multiple threads of a given process may be executed 
concurrently (via multithreading capabilities), sharing resources such as memory, while different processes do not share these resources. In particular, the threads of a process share its 
executable code and the values of its dynamically allocated variables and non-thread-local global variables at any given time.

# Thread Objects

Each thread is associated with an instance of the class Thread. There are two basic strategies for using Thread objects to create a concurrent 
application.

To directly control thread creation and management, simply instantiate Thread each time the application needs to initiate an asynchronous task.
To abstract thread management from the rest of your application, pass the application's tasks to an executor.
This section documents the use of Thread objects. Executors are discussed with other high-level concurrency objects.

# Defining and Starting a Thread

!An application that creates an instance of Thread must provide the code that will run in that thread!. 

There are two ways to do this

1. Provide a Runnable object. The Runnable interface defines a single method, run, meant to contain the code executed in the thread. The Runnable 
object is passed to the Thread constructor, as in the HelloRunnable example
[java]
public class HelloRunnable implements Runnable {

    public void run() {
        System.out.println("Hello from a thread!");
    }

    public static void main(String args[]) {
        (new Thread(new HelloRunnable())).start();
    }

}
[end]
2. Subclass Thread. The Thread class itself implements Runnable, though its run method does nothing. An application can subclass Thread, providing 
its own implementation of run, as in the HelloThread example
[java]
public class HelloThread extends Thread {

    public void run() {
        System.out.println("Hello from a thread!");
    }

    public static void main(String args[]) {
        (new HelloThread()).start();
    }

}
[end]
 The first idiom, which employs a Runnable object, is more general, because the Runnable object can subclass a class other than Thread. The second 
 idiom is easier to use in simple applications, but is limited by the fact that your task class must be a descendant of Thread. This lesson focuses 
 on the first approach, which separates the Runnable task from the Thread object that executes the task. Not only is this approach more flexible, but
  it is applicable to the high-level thread management APIs covered later.


# Pausing Execution with Sleep

Thread.sleep causes the current thread to suspend execution for a specified period. 
!This is an efficient means of making processor time available to the other threads! of an application or other applications that might be running 
on a computer system. The sleep method can also be used for pacing, as shown in the example that follows, and waiting for another thread with duties 
that are understood to have time requirements, as with the SimpleThreads example in a later section.

Two overloaded versions of sleep are provided: one that specifies the sleep time to the millisecond and one that specifies the sleep time to the 
nanosecond. 
!However, these sleep times are not guaranteed to be precise, because they are limited by the facilities provided by the underlying OS. 
!Also, the sleep period can be terminated by interrupts, as we'll see in a later section. 
!In any case, you cannot assume that invoking sleep will suspend the thread for precisely the time period specified.

# Interrupts
An interrupt is an indication to a thread that it should stop what it is doing and do something else. It's up to the programmer to decide exactly how
a thread responds to an interrupt, !but it is very common for the thread to terminate when interrupted. This is the usage emphasized in this lesson.

A thread sends an interrupt by invoking interrupt on the Thread object for the thread to be interrupted. For the interrupt mechanism to work correctly, 
the interrupted thread must support its own interruption.

# Supporting Interruption

How does a thread support its own interruption? This depends on what it's currently doing. If the thread is frequently invoking methods that throw 
InterruptedException, it simply returns from the run method after it catches that exception. For example, suppose the central message loop in the 
SleepMessages example were in the run method of a thread's Runnable object. Then it might be modified as follows to support interrupts
[java]
for (int i = 0; i < importantInfo.length; i++) {
    // Pause for 4 seconds
    try {
        Thread.sleep(4000);
    } catch (InterruptedException e) {
        // We've been interrupted: no more messages.
        return;
    }
    // Print a message
    System.out.println(importantInfo[i]);
}
[end]
Many methods that throw InterruptedException, such as sleep, are designed to cancel their current operation and return immediately when an interrupt 
is received.

!What if a thread goes a long time without invoking a method that throws InterruptedException? Then it must periodically invoke Thread.interrupted, 
!which returns true if an interrupt has been received. For example
[java]
for (int i = 0; i < inputs.length; i++) {
    heavyCrunch(inputs[i]);
    if (Thread.interrupted()) {
        // We've been interrupted: no more crunching.
        return;
    }
}
[end]
In this simple example, the code simply tests for the interrupt and exits the thread if one has been received. In more complex applications, it might 
make more sense to throw an InterruptedException
[java]
if (Thread.interrupted()) {
    throw new InterruptedException();
}
[end]
This allows interrupt handling code to be centralized in a catch clause.

# The Interrupt Status Flag
The interrupt mechanism is implemented using an internal flag known as the interrupt status. Invoking Thread.interrupt sets this flag. When a thread 
checks for an interrupt by invoking the static method Thread.interrupted, interrupt status is cleared. The non-static isInterrupted method, which is 
used by one thread to query the interrupt status of another, does not change the interrupt status flag.

By convention, any method that exits by throwing an InterruptedException clears interrupt status when it does so. However, it's always possible that 
interrupt status will immediately be set again, by another thread invoking interrupt.



## Multitasking
By definition, multitasking is when multiple processes share common processing resources such as a CPU.
##Multithreading
Multi-threading extends the idea of multitasking into applications where you can subdivide specific operations within a single application 
into individual threads. Each of the threads can run in parallel. The OS divides processing time not only among different applications, but also among each thread within an application.

#Parallelism and concurrency
http://tutorials.jenkov.com/java-concurrency/concurrency-vs-parallelism.html    (controversial)


#Thread Priorities
Every Java thread has a priority that helps the operating system determine the order in which threads are scheduled.Java thread priorities are in the range between MIN_PRIORITY (a constant of 1) and MAX_PRIORITY (a constant of 10). By default, every thread is given priority NORM_PRIORITY (a constant of 5).
When code running in some thread creates a new Thread object, the new thread has its priority initially set #equal to the priority of the creating thread#.

#How to implement Multithreading
1. implement the Runnable interface.
2. create a new class that extends #Thread class#

# ConcurrentHashMap    
When a Java Virtual Machine starts up, there is usually a single non-daemon thread (which typically calls the method named main of some designated class). 
The Java Virtual Machine continues to execute threads until either of the following occurs
1. The exit method of class Runtime has been called and the security manager has permitted the exit operation to take place.
2. All threads that are not daemon threads have died, either by returning from the call to the run method or by throwing an exception that propagates beyond the run method.
Types of locks


# ----------  Interview questions -------------
# 1. How to have three threads run after another? See thread-sequential example
// Happen after order
// t1,t2,t3 all implement Runnable and as normal objects instead of being threads, they can be executed one after another in sequential order

# 1. Assuming two threads should run in parallel, one solution would be to have each thread start the next one, since the JMM guarantees that:
! A call to start() on a thread happens-before any actions in the started thread. ???????????

# ----------
# Problem with starting a new thread in a JEE container
https://stackoverflow.com/questions/11713944/java-run-a-runnable-on-an-existing-thread

# How to validate that Thread.start() actually creates a new thread and runs it?
By putting a breakpoint inside the overriden run() method and run either start() or run() method to see the difference.


# What is the nature of Java Thread?
https://stackoverflow.com/questions/18278425/are-java-threads-created-in-user-space-or-kernel-space
1. 
Java threads are "user" threads, but under the hood, the Java Virtual Machine is using kernel threads and delegating 
the user threads CPU time on each kernel thread in its kernel thread pool. See this question for a better explanation. 
It seems that threading is JVM-vendor specific, and my understanding might not hold for all JVM implementations.
2. 
Most JVMs implement threads with native, OS level threads, including the Oracle reference implementation based on OpenJDK.

I imagine the JVMs that use 'green threads' (user space simulation of threads) would use preemptive scheduling so that 
an infinite loop in one thread doesn't block the other threads, but without knowledge of a particular implementation 
this is just speculation.

https://stackoverflow.com/questions/2653458/understanding-javas-native-threads-and-the-jvm

# Understanding Java native thread and the jvm
Answer1:
1. Does every thread create their own instance of the JVM to handle their particular execution?
No. They execute in the same JVM so that (for example) they can share objects and class attributes.

2. If not then does the JVM have to have some way to schedule which thread it will handle next
There are two kinds of thread implementation in Java. Native threads are mapped onto a thread abstraction which is 
implemented by the host OS. The OS takes care of native thread scheduling, and time slicing.

The second kind of thread is "green threads". These are implemented and managed by the JVM itself, with the JVM 
implementing thread scheduling. Java green thread implementations have not been supported by Sun / Oracle JVMs since 
Java 1.2. (See Green Threads vs Non Green Threads)

If so wouldn't this render the multi-threaded nature of Java useless since only one thread can be ran at a time?
We are talking about green threads now, and this is of historic interest (only) from the Java perspective.

Green threads have the advantage that scheduling and context switching are faster in the non-I/O case. (Based on 
measurements made with Java on Linux 2.2; http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.8.9238)
With pure green threads, N programming language threads are mapped to a single native thread. In this model you don't 
get true parallel execution, as you noted.
In a hybrid thread implementation, N programming language threads are mapped onto M native threads (where N > M). In 
this model, the in-process thread scheduler is responsible for the green thread to native thread scheduling AND you g
et true parallel execution (if M > 1); see https://stackoverflow.com/a/16965741/139985.
But even with the pure green threads, you still get concurrency. Control is switched to another threads a thread 
blocks on an I/O operation, whick acquiring a lock, and so on. Furthermore, the JVM's runtime could implement periodic 
thread preemption so that a CPU intensive thread doesn't monopolize the (single) core to the exclusion of other threads


#Answer2:
Does every thread create their own instance of the jvm to handle their particular execution?
No, your application running in the JVM can have many threads that all exist within that instance of the JVM.

If not then does the jvm have to have some way to schedule which thread it will handle next...
Yes, the JVM has a thread scheduler. There are many different algorithms for thread scheduling, and which one is used is JVM-vendor dependent. (Scheduling in general is an interesting topic.)

...if so wouldn't this render the multi-threaded nature of java useless since only one thread can be ran at a time?
I'm not sure I understand this part of your question. This is kind of the point of threading. You typically have more 
threads than CPUs, and you want to run more than one thing at a time. Threading allows you to take full(er) advantage 
of your CPU by making sure it's busy processing one thread while another is waiting on I/O, or is for some other 
reason not busy.

Answer3:
A Java thread may be mapped one-to-one to a kernel thread. But this must not be so. There could be n kernel threads running m java threads, 
where m may be much larger than n, and n should be larger than the number of processors. The JVM itself starts the n kernel threads, and 
each one of them picks a java thread and runs it for a while, then switches to some other java thread. The operating system picks kernel threads 
and assigns them to a cpu. So there may be thread scheduling on several levels. You may be interested to look at the GO programming language, 
where thousands of so called "Goroutines" are run by dozens of threads.

!?How exactly is the mapping of java thread to kernel thread? 1:1 or n:m?

# Scheduling is a interesting topc
https://en.wikipedia.org/wiki/Scheduling_%28computing%29


# Green thread and non-green thread
https://stackoverflow.com/questions/5713142/green-threads-vs-non-green-threads


# Sleep method
https://docs.oracle.com/javase/tutorial/essential/concurrency/sleep.html

# How are threads destroyed in Java:
https://stackoverflow.com/questions/671049/how-do-you-kill-a-thread-in-java

#  Hashtable,  Hashmap, ConcurrentHashMap
Just read the put() in the API(SE8)

`Hashtable`: put() :  ! HashTable has been obsolete since 1.2. Read the API note.

Maps the specified key to the specified value in this hashtable. !Neither the key nor the value can be null.!
The value can be retrieved by calling the get method with a key that is equal to the original key.

Returns:
the previous value of the specified key in this hashtable, or null if it did not have one
Throws:
NullPointerException - if the key or value is Null

--------------------------------
`HashMap`: put() ! It didn't mention anything about null, so null key or null value should be valid. Have a try in HashMapSE.java

Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced. 

Returns:
the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously 
associated null with key.)
Throws:
! No exception is thrown
--------------------------------
`ConcurrentHashMap`
Maps the specified key to the specified value in this table. !Neither the key nor the value can be null!. The value can be retrieved by calling the 
get method with a key that is equal to the original key.

Specified by:
put in interface Map<K,V>
Overrides:
put in class AbstractMap<K,V>
Returns:
the previous value associated with key, or null if there was no mapping for key
Throws:
NullPointerException - if the specified key or value is null


# .join() method analyze:
[java]
public final synchronized void join(long millis) throws InterruptedException {
        long base = System.currentTimeMillis();
        long now = 0;
        if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
        }
        // if millis is 0, wait indefinitely
        if (millis == 0) {
            // test if this thread is alive
            while (isAlive()) {
                wait(0);
            }
        } else {
            while (isAlive()) {
                long delay = millis - now;
                if (delay <= 0) {
                    break;
                }
                wait(delay);
                now = System.currentTimeMillis() - base;
            }
        }
    }
[end]
1.  synchronized means access to this code block can only be one thread at a time.
2.  


# What does Thread State BLOCKED mean:
BLOCKED : A thread that is blocked waiting for a !monitor lock! is in this state.

# What does "A thread blocked in IO mean?"
Well blocking IO means that a given thread cannot do anything more until the IO is fully received (in the case of sockets this wait could be a long time).

Non-blocking IO means an IO request is queued straight away and the function returns. The actual IO is then processed at some later point by the kernel.

For blocking IO you either need to accept that you are going to wait for every IO request or you are going to need to fire off a thread per request 
(Which will get very complicated very quickly).

For non-blocking IO you can send off multiple requests but you need to bear in mind that the data will not be available until some "later" point. 
This checking that the data has actually arrived is probably the most complicated part.

In 99% of applications you will not need to care that your IO blocks. Sometimes however you need the extra performance of allowing yourself to 
initiate an IO request and then do something else before coming back and, hopefully, finding that the IO request has completed.

# Coroutine

# Can a thread sleep indefinitely in java?
Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of the following 
methods with a specified positive waiting time: 

Thread.sleep
Object.wait with timeout
Thread.join with timeout
LockSupport.parkNanos
LockSupport.parkUntil

# why re-interrupt?
Usually, when a thread is interrupted, whoever is interrupting the thread, wants the thread to exit what it's currently doing.
[java]
try{
    //some code
} catch (InterruptedException ie) {
    logger.error("InterruptedException: ", ie);
    Thread.currentThread().interrupt();
} catch (ExecutionException ee) {
    logger.error("ExecutionException: ",ee);
}
[end]


# How is Thread.interrupt() implemented in java 
! how is interrupt0() implemented?
! What is this blocker field?
[java]
   public void interrupt() {
        if (this != Thread.currentThread()) {
            checkAccess();

            // thread may be blocked in an I/O operation
            synchronized (blockerLock) {
                Interruptible b = blocker;
                if (b != null) {
                    interrupt0();  // set interrupt status
                    b.interrupt(this);
                    return;
                }
            }
        }

        // set interrupt status
        interrupt0();
    }

  /* The object in which this thread is blocked in an interruptible I/O
     * operation, if any.  The blocker's interrupt method should be invoked
     * after setting this thread's interrupt status.
     */
    private volatile Interruptible blocker;
[end]


#Intransic lock, extransic locks
The fact that every object has a built-in lock is just a convenience so that you needn't explicitly create lock objects
[java]
public synchronized void foo() {
  doSomething;
}

// is equavalent to
public void foo() {
    synchronized(this) {
        doSomething;
    }
}
[end]


# What is a fail-fast iterator?
Iterators in java are used to iterate over the Collection objects. Fail-Fast iterators immediately throw ConcurrentModificationException 
if there is structural modification of the collection

# A structural modification of Collections
(A structural modification is any operation that adds or deletes one or more elements; merely setting the value( !Integer.set(x)! ) of 
an element is not a structural modification.

# How is iterator implemented?
Fail-fast iterators are typically implemented using a volatile counter on the collection object.

When the collection is updated, the counter is incremented.
When an Iterator is created, the current value of the counter is embedded in the Iterator object.
When an Iterator operation is performed, the method compares the two counter values and throws a CuoncurrentModificationException if they are different.

By contrast, weakly consistent iterators are typically light-weight and leverage properties of each concurrent collection's internal data structures. 
There is no general pattern. If you are interested, read the source code for different collection classes.

# Thread pool
In computer programming, a thread pool is a software design pattern for achieving concurrency of execution in a computer program. Often also called a 
replicated workers or worker-crew model, a thread pool maintains multiple threads waiting for tasks to be allocated for concurrent execution by the 
supervising program. !By maintaining a pool of threads, the model increases performance and avoids latency in execution due to frequent creation and 
!destruction of threads for short-lived tasks.! The number of available threads is tuned to the computing resources available to the program, such as 
a parallel task queue after completion of execution.

!One benefit of a thread pool over creating a new thread for each task is that thread creation and destruction overhead is restricted to the initial creation of the pool, 
!which may result in better performance and better system stability. 

!Creating and destroying a thread and its associated resources can be an expensive process in terms of time
!An excessive number of threads in reserve, however, wastes memory, and context-switching between the runnable threads invokes performance penalties

