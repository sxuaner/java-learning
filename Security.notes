
# Security Manager
Class loaders may typically be used by security managers to indicate security domains.

# http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html
Java Cryptography Architecture guide 

It would seem logical to collect and store the password in an object of type java.lang.String. However, here's the caveat: Objects of type String 
are immutable, i.e., there are no methods defined that allow you to change (overwrite) or zero out the contents of a String after usage. This 
feature makes String objects unsuitable for storing security sensitive information such as user passwords. You should always collect and store 
security sensitive information in a  char array instead.


Guideline 2-2 of the Secure Coding Guidelines for the Java Programming Language, Version 4.0
http://www.oracle.com/technetwork/java/seccodeguide-139067.html


# Why is an array favored than String for storing password
# Link: https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords

Strings are immutable. That means once you've created the String, if another process can dump memory, there's no way (aside from reflection) you can 
get rid of the data before garbage collection kicks in.

With an array, you can explicitly wipe the data after you're done with it. You can overwrite the array with anything you like, and the password 
won't be present anywhere in the system, even before garbage collection.

So yes, this is a security concern - but even using char[] only reduces the window of opportunity for an attacker, and it's only for this specific 
type of attack.

As noted in the comments, it's possible that arrays being moved by the garbage collector will leave stray copies of the data in memory. I believe 
this is implementation-specific - the garbage collector may clear all memory as it goes, to avoid this sort of thing. Even if it does, there's 
still the time during which the char[] contains the actual characters as an attack window.

# Comments on this thread
- If a process has access to memory of your application, then that is already a security breach, right? 
- Yes, but it's not like it's black and white. If they can only get a snapshot of the memory then you wnt to reduce how much damage that 
snapshot can do, or reduce the window during which a really serious snapshot can be taken
- Just a minor sidenote: Even though char[] can be cleared, it would still leak the length of the password or whatever was stored in it until it is garbage collected, since arrays can't be resized. (which could be used to greatly reduce the time needed to brute-force the password)

!if something is in black and white, it means one has to be correct and second has to be incorrect. in absolute terms; without shades of grey. seeing 
!things in absolute extremes. lacking colours except black and white.



# Can access modifier be reliable ?
Java does have the "package" access modifier which is the default access modifier when none is specified (ie. you don't specify public, private or 
protected). With the "package" access modifier, only classes in odp.proj will have access to the methods. But keep in mind that in Java, the access 
modifiers cannot be relied upon to enforce access rules because with reflection, any access is possible. Access modifiers are merely suggestive 
(unless a restrictive security manager is present).


!? HOw does java use cert?