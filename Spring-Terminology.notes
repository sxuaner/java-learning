https://www.springbyexample.org/examples/intro-to-ioc-creating-a-spring-application.html


#How is spring started
In short, "The Container" is a Spring instance in charge of managing the lifecycle of your beans.

#IoC 
inversion: a situation in which something is changed so that it is the opposite of what it was before, or in which something is turned upside down
reversion: a change back to a previous and often worse condition

# Dependency inversion

# Reactive meaning
In plain terms reactive programming is about non-blocking applications that are asynchronous and event-driven and require a small number of threads 
to scale. A key aspect of that definition is the concept of backpressure which is a mechanism to ensure producers don't overwhelm consumers.


# @Bean and @Component:
https://stackoverflow.com/questions/10604298/spring-component-versus-bean
@Component Preferable for component scanning and automatic wiring.

When should you use @Bean?

Sometimes automatic configuration is not an option. When? Let's imagine that you want to wire components from 3rd-party libraries 
(you don't have the source code so you can't annotate its classes with @Component), so automatic configuration is not possible.

The @Bean annotation returns an object that spring should register as bean in application context. The body of the method bears the logic responsible 
for creating the instance.


@Component auto detects and configures the beans using classpath scanning whereas @Bean explicitly declares a single bean, rather than letting Spring do it automatically.
@Component does not decouple the declaration of the bean from the class definition where as @Bean decouples the declaration of the bean from the class definition.
@Component is a class level annotation whereas @Bean is a method level annotation and name of the method serves as the bean name.
@Component need not to be used with the @Configuration annotation where as @Bean annotation has to be used within the class which is annotated with @Configuration.
We cannot create a bean of a class using @Component, if the class is outside spring container whereas we can create a bean of a class using @Bean even if the class is present outside the spring container.
@Component has different specializations like @Controller, @Repository and @Service whereas @Bean has no specializations.


#domain objects.


# MVC 
A key difference between a traditional MVC controller and the RESTful web service controller shown earlier is the way that the HTTP response body is 
created. Rather than relying on a view technology to perform server-side rendering of the greeting data to HTML, this RESTful web service controller
populates and returns a Greeting object. The object data will be written directly to the HTTP response as JSON.

# Jar Build an executable JAR
You can run the application from the command line with Gradle or Maven. You can also build a single executable JAR file that contains all the 
necessary dependencies, classes, and resources and run that. Building an executable jar makes it easy to ship, version, and deploy the service as an 
application throughout the development lifecycle, across different environments, and so forth.

# CommandLineRunner 

# Spring MVC

# spring core: what is included