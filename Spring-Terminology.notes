https://www.springbyexample.org/examples/intro-to-ioc-creating-a-spring-application.html

# What is Spring Bean Container?
The Spring IoC (Inversion of Control) container manages Spring beans. A “Spring bean” is just a Spring managed instantiation of a Java class.

The Spring IoC container is responsible for instantiating, initializing, and wiring beans. The container also manages the life cycle of beans.

#How is spring started
In short, "The Container" is a Spring instance in charge of managing the lifecycle of your beans.

 The “main” Method
    The final part of our application is the main method. This is a standard method that follows the Java convention for an application entry point. 
    Our main method delegates to Spring Boot’s SpringApplication class by calling run. SpringApplication bootstraps our application, starting Spring, 
    which, in turn, starts the auto-configured Tomcat web server. We need to pass MyApplication.class as an argument to the run method to tell 
    SpringApplication which is the primary Spring component. The args array is also passed through to expose any command-line arguments.


#IoC 
inversion: a situation in which something is changed so that it is the opposite of what it was before, or in which something is turned upside down
reversion: a change back to a previous and often worse condition

# Dependency inversion

# Reactive meaning
In plain terms reactive programming is about non-blocking applications that are asynchronous and event-driven and require a small number of threads 
to scale. A key aspect of that definition is the concept of backpressure which is a mechanism to ensure producers don't overwhelm consumers.


# @Bean and @Component:
https://stackoverflow.com/questions/10604298/spring-component-versus-bean
@Component Preferable for component scanning and automatic wiring.

When should you use @Bean?

Sometimes automatic configuration is not an option. When? Let's imagine that you want to wire components from 3rd-party libraries 
(you don't have the source code so you can't annotate its classes with @Component), so automatic configuration is not possible.

The @Bean annotation returns an object that spring should register as bean in application context. The body of the method bears the logic responsible 
for creating the instance.


@Component auto detects and configures the beans using classpath scanning whereas @Bean explicitly declares a single bean, rather than letting Spring do it automatically.
@Component does not decouple the declaration of the bean from the class definition where as @Bean decouples the declaration of the bean from the class definition.
@Component is a class level annotation whereas @Bean is a method level annotation and name of the method serves as the bean name.
@Component need not to be used with the @Configuration annotation where as @Bean annotation has to be used within the class which is annotated with @Configuration.
We cannot create a bean of a class using @Component, if the class is outside spring container whereas we can create a bean of a class using @Bean even if the class is present outside the spring container.
@Component has different specializations like @Controller, @Repository and @Service whereas @Bean has no specializations.


#domain objects.


# MVC 
A key difference between a traditional MVC controller and the RESTful web service controller shown earlier is the way that the HTTP response body is 
created. Rather than relying on a view technology to perform server-side rendering of the greeting data to HTML, this RESTful web service controller
populates and returns a Greeting object. The object data will be written directly to the HTTP response as JSON.

# Jar Build an executable JAR
You can run the application from the command line with Gradle or Maven. You can also build a single executable JAR file that contains all the 
necessary dependencies, classes, and resources and run that. Building an executable jar makes it easy to ship, version, and deploy the service as an 
application throughout the development lifecycle, across different environments, and so forth.

# CommandLineRunner 

# Spring MVC
# Spring web on servlet 

# spring core: what is included

# GA, RC, M SR in Spring
GA = General availability (a release); should be very stable and feature complete

RC = Release candidate; probably feature complete and should be pretty stable - problems should be relatively rare and minor, but worth 
reporting to try to get them fixed for release.

M = Milestone build - probably not feature complete; should be vaguely stable (i.e. it's more than just a nightly snapshot) but may still have problems.

SR = Service Release (subsequent maintenance releases that come after major -RELEASE)


# Bean Factory
[java]
public interface BeanFactory{}
[end]
The root interface for accessing a Spring bean container.
This is the basic client view of a bean container; further interfaces such as ListableBeanFactory and ConfigurableBeanFactory are available for 
specific purposes.

This interface is #implemented by objects that hold a number of bean definitions#, each uniquely #identified by a String name#. Depending on the 
bean definition, the factory will return either an independent instance of a contained object (the Prototype design pattern), or a single shared 
instance (a superior alternative to the Singleton design pattern, in which the instance is a singleton in the scope of the factory). Which type of instance will be returned depends on the bean factory configuration: the API is the same. Since Spring 2.0, further scopes are available depending on the concrete application context (e.g. "request" and "session" scopes in a web environment).

The point of this approach is that the BeanFactory is a central registry of application components, and centralizes configuration of application components (no more do individual objects need to read properties files, for example). See chapters 4 and 11 of "Expert One-on-One J2EE Design and Development" for a discussion of the benefits of this approach.

Note that it is generally better to rely on Dependency Injection ("push" configuration) to configure application objects through setters or constructors, rather than use any form of "pull" configuration like a BeanFactory lookup. Spring's Dependency Injection functionality is implemented using this BeanFactory interface and its subinterfaces.

Normally a BeanFactory will load bean definitions stored in a configuration source (such as an XML document), and use the org.springframework.beans package to configure the beans. However, an implementation could simply return Java objects it creates as necessary directly in Java code. There are no constraints on how the definitions could be stored: LDAP, RDBMS, XML, properties file, etc. Implementations are encouraged to support references amongst beans (Dependency Injection).

In contrast to the methods in ListableBeanFactory, all of the operations in this interface will also check parent factories if this is a HierarchicalBeanFactory. If a bean is not found in this factory instance, the immediate parent factory will be asked. Beans in this factory instance are supposed to override beans of the same name in any parent factory.

Bean factory implementations should support the standard bean lifecycle interfaces as far as possible. The full set of initialization methods and their standard order is:

BeanNameAware's setBeanName
BeanClassLoaderAware's setBeanClassLoader
BeanFactoryAware's setBeanFactory
EnvironmentAware's setEnvironment
EmbeddedValueResolverAware's setEmbeddedValueResolver
ResourceLoaderAware's setResourceLoader (only applicable when running in an application context)
ApplicationEventPublisherAware's setApplicationEventPublisher (only applicable when running in an application context)
MessageSourceAware's setMessageSource (only applicable when running in an application context)
ApplicationContextAware's setApplicationContext (only applicable when running in an application context)
ServletContextAware's setServletContext (only applicable when running in a web application context)
postProcessBeforeInitialization methods of BeanPostProcessors
InitializingBean's afterPropertiesSet
a custom init-method definition
postProcessAfterInitialization methods of BeanPostProcessors
On shutdown of a bean factory, the following lifecycle methods apply:

postProcessBeforeDestruction methods of DestructionAwareBeanPostProcessors
DisposableBean's destroy
a custom destroy-method definition


# Life Cycle
Spring provides several ways through which you can tap into the bean lifecycle. For example, once a bean is instantiated, you might need to 
perform some initialization to get the bean into a usable state. Similarly, you might need to clean up resources before a bean is removed from 
the container.

Lifecycle1.png: Part 1: Shows the different stages a bean goes through after instantiation until it is ready for use.

Lifecycle2.png: Part 2: Shows what happens to a bean once the Spring IoC container shuts down.

As you can see in Part 1 of the preceding figure, the container instantiates a bean by calling its constructor and then populates its properties.

This is followed by several calls to the bean until the bean is in the ready state.

Similarly, as shown in Part 2, when the container shuts down, the container calls the bean to enable it to perform any required tasks before
the bean is destroyed.

####### Aware interfaces
Spring provides several aware interfaces. These are used to access the Spring Framework infrastructure. The aware interfaces are largely used
within the framework and rarely used by Spring programmers.

BeanFactoryAware: Provides setBeanFactory(), a callback that supplies the owning factory to the bean instance.
BeanNameAware: ThesetBeanName() callback of this interface supplies the name of the bean.
ApplicationContextAware: ThesetApplicationContext() method of this interface provides the ApplicationContext object of this bean.


# Populate meaning: to fill

# To fall back: 
  // Cannot access thread context ClassLoader - falling back to system class loader...
  // Fallback is a contingency option to be taken if the preferred choice is unavailable. 

# callback interface: 



# Creating an Executable Jar
We finish our example by creating a completely self-contained executable jar file that we could run in production. Executable jars (sometimes called
“fat jars”) are archives containing your compiled classes along with all of the jar dependencies that your code needs to run.


# A list of spring boot starters
https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using


# Not recommended of using default package due to component scan
When a class does not include a package declaration, it is considered to be in the “default package”. The use of the “default package” is generally 
discouraged and should be avoided. It can cause particular problems for Spring Boot applications that use the @ComponentScan, 
@ConfigurationPropertiesScan, @EntityScan, or @SpringBootApplication annotations, since every class from every jar is read.

We recommend that you follow Java’s recommended package naming conventions and use a reversed domain name (for example, com.example.project).

# Primary source
Spring Boot favors Java-based configuration. Although it is possible to use SpringApplication with XML sources, we generally recommend that your 
primary source be a single @Configuration class. Usually the class that defines the main method is a good candidate as the primary @Configuration.

Many Spring configuration examples have been published on the Internet that use XML configuration. If possible, always try to use the equivalent 
Java-based configuration. Searching for Enable* annotations can be a good starting point.

# Importing xml configurations
If you absolutely must use XML based configuration, we recommend that you still start with a @Configuration class. You can then use an @ImportResource 
annotation to load XML configuration files.

# Auto-configuration
Spring Boot auto-configuration attempts to automatically configure your Spring application based on the jar dependencies that you have added. 
For example, if HSQLDB is on your classpath, and you have not manually configured any database connection beans, then Spring Boot auto-configures an in-memory database.

# What is the application.properties file?

#Auto-restart  and devtool
Spring Boot includes an additional set of tools that can make the application development experience a little more pleasant. 
The spring-boot-devtools module can be included in any project to provide additional development-time features. 

# Spring boot devltool restarts on change
The restart technology provided by Spring Boot works by using two classloaders. Classes that do not change (for example,
those from third-party jars) are loaded into a base classloader. Classes that you are actively developing are loaded into a
restart classloader. When the application is restarted, the restart classloader is thrown away and a new one is created. This
approach means that application restarts are typically much faster than “cold starts”, since the base classloader is already
available and populated

[xml]
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <optional>true</optional>
    </dependency>
</dependencies>
[end]

#Actuator Endpoint
Actuator endpoints let you monitor and interact with your application. Spring Boot includes a number of built-in endpoints and lets you add your own. 
For example, the health endpoint provides basic application health information.

Each individual endpoint can be enabled or disabled and exposed (made remotely accessible) over HTTP or JMX. An endpoint is considered to be 
available when it is both enabled and exposed. The built-in endpoints will only be auto-configured when they are available. Most applications 
choose exposure via HTTP, where the ID of the endpoint along with a prefix of /actuator is mapped to a URL. For example, by default, the health
endpoint is mapped to /actuator/health.
[xml]
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
</dependencies>
[end]

# What implementations of BeanFactory are avaible?
Interfaces:
ApplicationContext
[java]
public interface ApplicationContext
    extends EnvironmentCapable, ListableBeanFactory, HierarchicalBeanFactory, MessageSource, ApplicationEventPublisher, ResourcePatternResolver{}
[end]
ConfigurableApplicationContext and ListableApplicationContext
Annotaion

Implementations:
[java]
public class AnnotationConfigApplicationContext
    extends GenericApplicationContext
    implements AnnotationConfigRegistry{}

public class GenericApplicationContext
    extends AbstractApplicationContext
    implements BeanDefinitionRegistry{}

public abstract class AbstractApplicationContext
    extends DefaultResourceLoader
    implements ConfigurableApplicationContext{}

public class DefaultResourceLoader
    extends Object
    implements ResourceLoader{}

[end]